apiVersion: apps/v1
kind: Deployment
metadata:
  name: game-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: game-service
  template:
    metadata:
      labels:
        app: game-service
    spec:
      containers:
      - name: game-service
        image: playlistplayoffsregistry.azurecr.io/game-service:latest
        ports:
        - containerPort: 6000

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  serviceName: "kafka"
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: bitnami/kafka:latest
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT"
        - name: KAFKA_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_CONTROLLER_QUORUM_VOTERS
          value: "0@kafka-0.kafka:9092,1@kafka-1.kafka:9092,2@kafka-2.kafka:9092"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://$(MY_POD_IP):9092"
        - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
          value: "PLAINTEXT"
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KAFKA_CFG_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command: ['/bin/sh', '-c', 'export KAFKA_CFG_NODE_ID=$(hostname | grep -o "[0-9]+$") && exec /opt/bitnami/scripts/kafka/run.sh']
        volumeMounts:
        - name: kafka-storage
          mountPath: /bitnami/kafka
        - name: config-volume
          mountPath: /opt/bitnami/kafka/config
      volumes:  # This should be at the same level as containers
      - name: config-volume
        configMap:
          name: kafka-config
  volumeClaimTemplates:
  - metadata:
      name: kafka-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
data:
  server.properties: |
    process.roles=broker,controller
    controller.quorum.voters=0@kafka-0.kafka:9092,1@kafka-1.kafka:9092,2@kafka-2.kafka:9092
    listeners=PLAINTEXT://:9092
    advertised.listeners=PLAINTEXT://$(MY_POD_IP):9092
    num.network.threads=3
    num.io.threads=8
    socket.send.buffer.bytes=102400
    socket.receive.buffer.bytes=102400
    socket.request.max.bytes=104857600
    num.partitions=1
    log.dirs=/var/lib/kafka/data
    log.retention.hours=168
    log.segment.bytes=1073741824
    log.retention.check.interval.ms=300000
  # log4j.properties: |
  #   # Log4j configuration settings
  #   log4j.rootLogger=INFO, stdout
  #   log4j.appender.stdout=org.apache.log4j.ConsoleAppender
  #   log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
  #   log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: angular-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: angular-app
  template:
    metadata:
      labels:
        app: angular-app
    spec:
      containers:
      - name: angular-app
        image: playlistplayoffsregistry.azurecr.io/playlist-playoffs:latest
        ports:
        - containerPort: 80


