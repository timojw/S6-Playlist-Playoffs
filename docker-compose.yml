version: '3.8'

networks:
  kafka-network:
    driver: bridge
  pp-network:
    driver: bridge

services:
# The Kafka cluster
  kafka:
    container_name: kafka
    image: "bitnami/kafka:latest"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXTLOCAL://:9094,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXTLOCAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXTLOCAL://localhost:9094
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_CFG_DELETE_TOPICS_ENABLE=false
    networks:
      - kafka-network
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9094:9094"
    expose:
      - "9092"
      - "9093"
      - "9094"
    volumes:
      - kafka-data:/bitnami/kafka
  # This services creates the topics in the Kafka cluster, afterwards it will exit
  kafka-init:
    image: "bitnami/kafka:latest"
    networks:
      - kafka-network
    command: ["/bin/bash", "-c", "/create-topics.sh"]
    depends_on:
      - kafka
    volumes:
      - type: bind
        source: services/apache-kafka/create-topics.sh
        target: /create-topics.sh
    init: true

  # This service is the Kafka UI, accessible at localhost:8080, allows for easy debugging.
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    networks:
      - kafka-network
    ports:
      - 9090:9090
    environment:
      DYNAMIC_CONFIG_ENABLED: "false"
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  game-service:
    depends_on:
      - kafka
      - kafka-ui
    container_name: game-service
    image: game-service:latest
    build:
      context: .
      dockerfile: services/game/Dockerfile
    networks:
      - pp-network
    env_file: services/game/.env
    ports:
      - 8081:8081

  # API Krakend gateway
  krakend:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    environment:
      - AUDIENCE=https://dev-emkd7gpm4ah6eukc.us.auth0.com/api/v2/
      - GAME_HOST=http://host.docker.internal:8081
    #   - INFLUX_HOST=${INFLUX_HOST}
    #   - INFLUX_PORT=${INFLUX_PORT}
    #   - INFLUX_USER=${INFLUX_USER}
    #   - INFLUX_USER_PASSWORD=${INFLUX_USER_PASSWORD}
    networks:
      - pp-network

  # # InfluxDB for storing telementric data of the gateway
  # influxdb:
  #   image: influxdb:1.8.10
  #   environment:
  #     - "INFLUXDB_DB=krakend"
  #     - "INFLUXDB_USER=${INFLUX_USER}"
  #     - "INFLUXDB_USER_PASSWORD=${INFLUX_USER_PASSWORD}"
  #     - "INFLUXDB_ADMIN_USER=${INFLUX_ADMIN_USER}"
  #     - "INFLUXDB_ADMIN_PASSWORD=${INFLUX_ADMIN_PASSWORD}"
  #   ports:
  #     - "8086:8086"

  web:
    build:
      context: ./services/web/playlist-playoffs
      dockerfile: Dockerfile
    environment:
      - API_URL=http://localhost:8080
    ports:
      - "3000:3000"
      - "3001:3001"
    networks:
      - pp-network
    restart: on-failure

volumes:
  kafka-data:
    driver: local
